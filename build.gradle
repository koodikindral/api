buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        palantirPluginVersion = '0.20.1'
    }
    repositories {
        mavenCentral()
        maven {
            url('https://plugins.gradle.org/m2/')
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${palantirPluginVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'com.estsoft'
version = '0.0.4-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    compile('org.springframework.boot:spring-boot-devtools')
    compileOnly('org.projectlombok:lombok')
    testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
    testCompile('org.junit.jupiter:junit-jupiter-engine')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
    testCompile group: 'org.scala-lang', name: 'scala-library', version: '2.12.8'
    testImplementation group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: '3.0.0'
}

docker {
    dependsOn build
    name "koodikindral/api:api-latest"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
    noCache true
}

test {
    filter {
        includeTestsMatching '*Test'
    }
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
}

task testLoad(type: JavaExec) {
    description = 'Test load the Spring Boot web service with Gatling'
    group = 'verification'
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = [
            // workaround for https://github.com/gatling/gatling/issues/2689
            "-Dgatling.core.directory.binaries=${sourceSets.test.output.classesDir.toString()}",
            "-Dlogback.configurationFile=${logbackGatlingConfig()}"
    ]
    main = 'io.gatling.app.Gatling'
    args = [
            '--simulation', 'com.estsoft.api.gatling.simulation.LoadTest',
            '--results-folder', "${buildDir}/gatling-results",
            '--binaries-folder', sourceSets.test.output.classesDir.toString() // ignored because of above bug
    ]
}
def logbackGatlingConfig() {
    return sourceSets.test.resources.find { it.name == 'logback-gatling.xml'};
}